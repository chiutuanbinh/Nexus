// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nexus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NexusClient is the client API for Nexus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReponse, error)
}

type nexusClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusClient(cc grpc.ClientConnInterface) NexusClient {
	return &nexusClient{cc}
}

func (c *nexusClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nexus.Nexus/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReponse, error) {
	out := new(PutReponse)
	err := c.cc.Invoke(ctx, "/nexus.Nexus/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReponse, error) {
	out := new(GetReponse)
	err := c.cc.Invoke(ctx, "/nexus.Nexus/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusServer is the server API for Nexus service.
// All implementations must embed UnimplementedNexusServer
// for forward compatibility
type NexusServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Put(context.Context, *PutRequest) (*PutReponse, error)
	Get(context.Context, *GetRequest) (*GetReponse, error)
	mustEmbedUnimplementedNexusServer()
}

// UnimplementedNexusServer must be embedded to have forward compatible implementations.
type UnimplementedNexusServer struct {
}

func (UnimplementedNexusServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNexusServer) Put(context.Context, *PutRequest) (*PutReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedNexusServer) Get(context.Context, *GetRequest) (*GetReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNexusServer) mustEmbedUnimplementedNexusServer() {}

// UnsafeNexusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServer will
// result in compilation errors.
type UnsafeNexusServer interface {
	mustEmbedUnimplementedNexusServer()
}

func RegisterNexusServer(s grpc.ServiceRegistrar, srv NexusServer) {
	s.RegisterService(&Nexus_ServiceDesc, srv)
}

func _Nexus_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.Nexus/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.Nexus/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.Nexus/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nexus_ServiceDesc is the grpc.ServiceDesc for Nexus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nexus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.Nexus",
	HandlerType: (*NexusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Nexus_Ping_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Nexus_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Nexus_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexus.proto",
}
